#!/usr/bin/env python3

import ipaddress,openpyxl
from sys import argv

def get_range(cidr_notation):
    try:
        # Parse the CIDR notation to get the network object
        network = ipaddress.IPv4Network(cidr_notation, strict=False)
        #first_usable_ip = network.network_address + 1  # this is *usable*, but misses gateway/router in our implementation
        first_usable_ip = network.network_address 
        last_usable_ip = network.broadcast_address - 1

        return str(first_usable_ip), str(last_usable_ip)
    except ValueError as e:
        return str(e)

def build_list():
    '''Build/return a list with the contents of the entire spreadsheet (first/named tab only)'''
    wb=openpyxl.load_workbook(workbook)
    sheet=wb.worksheets[0] # we're only going to pull from the first sheet in the workbook, regardless of its name
    snrow = [] #empty list to fill with rows/colums from the spreadsheet
    rows = sheet.max_row
    for r in range(1, rows+1):
        sncidr = sheet.cell(r,1).value
        snname = sheet.cell(r,2).value
        row = [sncidr, snname]
        snrow.append(row)

    # blank rows return 'None'. Let's clean those up...
    flist = []
    for r in range(len(snrow)):
        if snrow[r][0] is not None:
            flist.append(snrow[r])

    return flist

def make_gens(snlist):
    # snlist is the basic list with CIDR,subnet name. Let's append the $GENERATE preamble, based on IP ranges for the CIDR to the list
    for r in range(len(snlist)):
        first, last = get_range(snlist[r][0])
        genstring = f'$GENERATE {str(first).split(".")[3]}-{str(last).split(".")[3]}     $    PTR    '
        snlist[r].append(genstring)
    return snlist

def sanitize_snname(cidr, snname):
    # using the first 3 octets of the cidr, prepend the standardized wildcard designation for the name.
    #newsnname = '$.'
    octetlist = cidr.split('.')
    #newsnname += octetlist[2] + '.' + octetlist[1] + '.' + octetlist[0] + '.' + snname[8:] # assuming that the given name includes '$-$-$-$.'
    newsnname = octetlist[0] + '-' + octetlist[1] + '-' + octetlist[2] + '-$' '.' + snname[8:] # assuming that the given name includes '$-$-$-$.'
    # the PTR name/directive MUST end with a '.', so...
    if newsnname[-1] != '.':
        newsnname += '.'
    return newsnname

def add_snname(snlist):
    # take the subnet name (element 1) in the list and parse it to build a reasonable wildcard with the last octet as a variable
    # like: $.47.168.192.kenkl.org
    for r in range(len(snlist)):
        snname = snlist[r][1]
        snlist[r].append(sanitize_snname(snlist[r][0], snname))

    return snlist

def make_copypasta(snlist):
    # take the assembled/calculated $GENERATE bits and dump them to a file, ready to copypasta to the zonefile of interest.
    cp = open(outfile, 'w')
    cp.write('# some tasty copypasta for whichever zonefiles get these.\n\n')
    for r in range(len(snlist)):
        line = snlist[r][2] + snlist[r][3] + '\n'
        cp.write(line)
    cp.close()
    print(f"{outfile} has been assembled for copypasta fun-times. Enjoy!")

def main():
    # tying together all the bits to do A Thingâ„¢
    # First, let's build a list of the CIDRs and wildcard assignments, based on the .xlsx named up top
    snlist = build_list()
    # For each row, let's calculate the IPs for the CIDR, and append a list item for each with the $GENERATE prefix
    snlist = make_gens(snlist)
    # Next, let's spin through the rows again to tack on the subnet name. 
    snlist = add_snname(snlist)
    # Finally, let's take the assembled list (containing the zonefile elements), and dump it to a file (named above) for copypasta goodness.
    make_copypasta(snlist)

if __name__ == "__main__":
    global workbook, outfile
    try:
        workbook = argv[1]
    except:
        print('Useage: ipv4genptrs.py <workbook.xlsx>')
        print('where workbook.xlsx contains the PTR zones to be created\n')
        exit(1)
    outfile = workbook[:len(workbook)-5] + '.txt'
    main()
